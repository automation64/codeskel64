---
# Define supported platforms
X_ROLE_NAME_X_platforms:
  - "CentOS8"
  - "RedHat8"
  - "AlmaLinux8"
  - "OracleLinux8"
  - "Ubuntu20"
  - "Ubuntu21"
  - "Fedora33"
  - "Fedora35"
  - "Debian10"
  - "Debian11"
  - "MacOSX12"

# Group Linux Distributions by family
X_ROLE_NAME_X_os_family: "
  {%- if
      ( ansible_distribution == 'CentOS' ) or
      ( ansible_distribution == 'RedHat' ) or
      ( ansible_distribution == 'AlmaLinux' ) or
      ( ansible_distribution == 'OracleLinux' ) or
      ( ansible_distribution == 'Fedora' )
  -%}
    {{ 'RedHat' }}
  {%- elif
      ( ansible_distribution == 'Debian' ) or
      ( ansible_distribution == 'Ubuntu' )
  -%}
    {{ 'Ubuntu' }}
  {%- elif
      ( ansible_distribution == 'MacOSX' )
  -%}
    {{ 'MacOSX' }}
  {%- else -%}
    {{ 'NotSupported' }}
  {%- endif -%}
  "

# Multiplatform packages
X_ROLE_NAME_X_profiles_common:
  snap: {}
  flatpak: {}
  pip: {}
  # TODO: Remove this snippet if not used
  # snap:
  #   latest:
  #     supported: true
  #     packages:
  #       - name: "X_APP_PACKAGE_X"
  # flatpak:
  #   latest:
  #     supported: true
  #     origin: "flathub"
  #     packages:
  #       - name: "X_APP_PACKAGE_X"
  # pip:
  #   latest:
  #     supported: true
  #     packages:
  #         - name: "X_APP_PACKAGE_X"
  #     options:
  #       pip:
  #         owner: "{{ X_ROLE_NAME_X_owners['X_DEFAULT_USER_X']['user'] }}"
  #         group: "{{ X_ROLE_NAME_X_owners['X_DEFAULT_USER_X']['group'] }}"
  #         path: "{{ X_ROLE_NAME_X_paths['X_DEFAULT_PATH_X'] }}"
  #         cli: "{{ X_ROLE_NAME_X_application['name'] }}"
  # brew:
  #   latest:
  #     supported: true
  #     packages:
  #       - name: "X_APP_PACKAGE_X"

# Define common paths
X_ROLE_NAME_X_base_common:
  access:
    user:
      owner: "root"
      # X_DEFAULT_USER_X: "{{ X_ROLE_NAME_X_owners['X_DEFAULT_USER_X']['user'] }}"
    group:
      owner: "root"
      # X_DEFAULT_USER_X: "{{ X_ROLE_NAME_X_owners['X_DEFAULT_USER_X']['group'] }}"
    mode:
      dir: "0755"
      file: "0644"
      exe: "0755"
  templates: {}
  paths: {}
  files: {}
  run: {}
  etc: {}
  # run:
  #   X_APP_TYPE_X:
  #     X_BASE_RUN_X: "X_BASE_RUN_VALUE_X"
  # templates:
  #   X_TEMPLATE_SERVER_X: "X_TEMPLATE_SERVER_NAME_X.j2"
  # paths:
  #   root: "{{ X_ROLE_NAME_X_paths['root'] | default('X_ROOT_PATH_VALUE_X') }}"
  #   X_BASE_PATH_X: "{{ X_ROLE_NAME_X_paths['X_DEFAULT_PATH_X'] | default('X_DEFAULT_PATH_VALUE_X') }}"
  # files:
  #   X_BASE_FILE_SETUP_X: "X_BASE_FILE_SETUP_VALUE_X"
  # run:
  #   X_BASE_RUN_X: "X_BASE_RUN_VALUE_X"
  # etc:
  #   X_BASE_ETC_X: "X_BASE_ETC_VALUE_X"

# Define custom package repositories
X_ROLE_NAME_X_repository_custom_brew: []
  # TODO: Remove this snippet if not used
  # - name: "X_BREW_REPO_X"
  #   url: "X_BREW_SRC_X"

# Set package repositories states
X_ROLE_NAME_X_repository_catalog_brew: {}
  # X_BREW_REPO_X: true

# Build firewall rules based on end-state requirements
X_ROLE_NAME_X_firewall_rules:
  - id: "X_FWE_RULE"
    service: "X_FWE_SERVICE"
    # zone: "{{ X_ROLE_NAME_X_firewall['zone'] | default('public') }}"
    zone: "{{ X_ROLE_NAME_X_firewall['zone'] }}"
    allow: "{{ X_ROLE_NAME_X_subsystem['enabled'] | ternary('enabled', 'disabled') }}"

# Temporary loop variables
# X_ROLE_NAME_X___prepare_path
# X_ROLE_NAME_X___setup_user
...
